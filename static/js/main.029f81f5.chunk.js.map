{"version":3,"sources":["images/dam.svg","images/factory.svg","waterData.js","RenderBarChart.js","DamModal.js","FactoryModal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getRandomUsed","num","Math","floor","random","String","getRandomReplenished","waterData","id","state","value","used","replenished","getStateData","currentState","result","find","obj","console","log","RenderBarChart","BarChart","width","height","data","XAxis","type","dataKey","YAxis","Tooltip","cursor","Legend","Bar","stroke","fill","background","isAnimationActive","barSize","DamModal","modal","toggle","Modal","isOpen","ModalHeader","ModalBody","Row","className","FactoryModal","INDIA_TOPO_JSON","require","PROJECTION_CONFIG","scale","center","geographyStyle","default","outline","hover","transition","pressed","App","useState","tooltipContent","setTooltipContent","setCurrentState","onMouseEnter","geo","properties","name","onMouseLeave","damModal","setDamModal","damToggle","factoryModal","setFactoryModal","factoryToggle","Container","Col","xs","projectionConfig","projection","data-tip","geography","geographies","map","current","s","key","rsmKey","style","marginTop","display","justifyContent","onClick","src","factory","alt","waterDam","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.029f81f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dam.d44b857e.svg\";","module.exports = __webpack_public_path__ + \"static/media/factory.32a28c5e.svg\";","const getRandomInt = () => {\n    return 22\n}\nconst getRandomUsed = () => {\n    let min = 150;\n    let max = 500;\n    let num = Math.floor(Math.random() * (max - min + 1)) + min;\n    return String(num)\n}\nconst getRandomReplenished = () => {\n    let min = 150;\n    let max = 500;\n    let num = Math.floor(Math.random() * (max - min + 1)) + min;\n    return String(num)\n}\n\nexport const waterData = [\n    { id: 'AP', state: 'Andhra Pradesh', value: getRandomInt(),used: getRandomUsed(), replenished: getRandomReplenished()  },\n    { id: 'AR', state: 'Arunachal Pradesh', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'AS', state: 'Assam', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'BR', state: 'Bihar', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'CT', state: 'Chhattisgarh', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'GA', state: 'Goa', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'GJ', state: 'Gujarat', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'HR', state: 'Haryana', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'HP', state: 'Himachal Pradesh', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'JH', state: 'Jharkhand', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'KA', state: 'Karnataka', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'KL', state: 'Kerala', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'MP', state: 'Madhya Pradesh', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'MH', state: 'Maharashtra', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'MN', state: 'Manipur', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'ML', state: 'Meghalaya', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'MZ', state: 'Mizoram', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'NL', state: 'Nagaland', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'OD', state: 'Odisha', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'PB', state: 'Punjab', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'RJ', state: 'Rajasthan', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'SK', state: 'Sikkim', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'TN', state: 'Tamil Nadu', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'TS', state: 'Telangana', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'TR', state: 'Tripura', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'UK', state: 'Uttarakhand', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'UP', state: 'Uttar Pradesh', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'WB', state: 'West Bengal', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'WB', state: 'West Bengal', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'AN', state: 'Andaman and Nicobar Islands', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'CH', state: 'Chandigarh', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'DN', state: 'Dadra and Nagar Haveli', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'DD', state: 'Daman and Diu', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'DL', state: 'Delhi', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'JK', state: 'Jammu and Kashmir', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'LA', state: 'Ladakh', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'LD', state: 'Lakshadweep', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() },\n    { id: 'PY', state: 'Puducherry', value: getRandomInt() , used: getRandomUsed(), replenished: getRandomReplenished() }\n]\n\nexport const getStateData = (currentState) => {\n    var result = waterData.find(obj => {\n        return obj.id === currentState\n    })\n    console.log(result)\n    return [result]\n}","import React from 'react';\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, } from 'recharts';\nimport { getStateData } from './waterData'\n\nconst RenderBarChart = ({currentState}) => {\n  return (\n      <BarChart\n          width={400}\n          height={200}\n          data={getStateData(currentState)}\n          >\n          <XAxis type=\"category\" dataKey=\"state\"/>\n          <YAxis type=\"number\"/>\n          <Tooltip cursor={false}/>\n          <Legend />\n          <Bar dataKey=\"used\" stroke=\"#8884d8\" fill=\"#8884d8\" background={{ stroke: '#eee' }} isAnimationActive={true} barSize={40}/>\n          <Bar dataKey=\"replenished\" stroke=\"#82ca9d\" fill=\"#82ca9d\" background={{ stroke: '#eee' }} isAnimationActive={false} barSize={40}/>\n      </BarChart>\n  )\n}\n\nexport default RenderBarChart;","import React from 'react';\nimport {  Modal, ModalHeader, ModalBody, Row } from 'reactstrap';\n\nconst DamModal = ({modal, toggle, currentState}) => {\n    return (\n      <Modal isOpen={modal} toggle={toggle} >\n        <ModalHeader toggle={toggle}>Dam Info -  {currentState}</ModalHeader>\n        <ModalBody>\n            <Row>\n                <p className='text-center'>Reservoir</p>\n                <strong>Water Replenished:</strong>\n                <strong>People benifited:</strong>\n                <strong>Date:</strong>\n            </Row>\n        </ModalBody>\n      </Modal>\n    )\n}\n\nexport default DamModal\n","import React from 'react'\nimport {  Modal, ModalHeader, ModalBody, Row } from 'reactstrap';\n\nconst FactoryModal = ({modal, toggle, currentState}) => {\n    return (\n      <Modal isOpen={modal} toggle={toggle} >\n        <ModalHeader toggle={toggle}>Factory Info - {currentState}</ModalHeader>\n        <ModalBody>\n            <Row>\n                <p className='text-center'>Factory</p>\n                <strong>Waste Produced:</strong>\n                <strong>Water Consumed:</strong> <span>(Ground water + Municipal)</span>\n            </Row>\n        </ModalBody>\n      </Modal>\n    )\n}\n\nexport default FactoryModal\n","import React, { useState } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\nimport './App.css';\nimport RenderBarChart from './RenderBarChart';\nimport { waterData } from './waterData';\nimport waterDam from './images/dam.svg';\nimport factory from './images/factory.svg';\nimport DamModal from './DamModal';\nimport FactoryModal from './FactoryModal';\n\nconst INDIA_TOPO_JSON = require('./india.topo.json');\n\nconst PROJECTION_CONFIG = {\n  scale: 350,\n  center: [78.9629, 22.5937] // always in [East Latitude, North Longitude]\n};\n\n\nconst geographyStyle = {\n  default: {\n    outline: 'none',\n  },\n  hover: {\n    fill: '#ccc',\n    transition: 'all 250ms',\n    outline: 'none'\n  },\n  pressed: {\n    outline: 'none'\n  }\n};\n\nfunction App() {\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [data,] = useState(waterData);\n  const [currentState, setCurrentState] = useState('GJ')\n\n  const onMouseEnter = (geo, current = { value: 'NA' }) => {\n    return () => {\n      setTooltipContent(`${geo.properties.name}`);\n      setCurrentState(geo.id)\n    };\n  };\n\n  const onMouseLeave = () => {\n    setTooltipContent('');\n  };\n\n  const [damModal, setDamModal] = useState(false);\n\n  const damToggle = () => setDamModal(!damModal);\n\n  const [factoryModal, setFactoryModal] = useState(false);\n\n  const factoryToggle = () => setFactoryModal(!factoryModal);\n\n  return (\n    <Container >\n      <Row>\n        <Col>\n          <h1 className=\"no-margin center\">Water/Waste Map</h1>\n        </Col>\n      </Row>\n      <hr/>\n      <ReactTooltip>{tooltipContent}</ReactTooltip>\n      <Row>\n      <Col xs=\"8\">\n        <DamModal modal={damModal} toggle={damToggle} currentState={currentState}/>\n        <FactoryModal modal={factoryModal} toggle={factoryToggle} currentState={currentState}/>\n        <ComposableMap\n            projectionConfig={PROJECTION_CONFIG}\n            projection=\"geoMercator\"\n            width={300}\n            height={200}\n            data-tip=\"\"\n          >\n            <Geographies geography={INDIA_TOPO_JSON}>\n              {({ geographies }) =>\n                geographies.map(geo => {\n                  const current = data.find(s => s.id === geo.id);\n                  return (\n                    <Geography\n                      key={geo.rsmKey}\n                      geography={geo}\n                      fill='#ff8a75'\n                      style={geographyStyle}\n                      onMouseEnter={onMouseEnter(geo, current)}\n                      onMouseLeave={onMouseLeave}\n                    />\n                  );\n                })\n              }\n            </Geographies>\n          </ComposableMap>\n        </Col>\n      <Col xs=\"4\">\n\n        <Row style={{marginTop: '80px'}}><RenderBarChart currentState={currentState} /></Row>\n        <p className='text-center'>WATER INFO</p>\n        <br/>\n        <Row >\n          <div style={{display:'flex', justifyContent: 'space-around'}}>\n            <div onClick={factoryToggle}>\n              <img src={factory} style={{width:\"60px\"}} alt='Factory'/>\n              <p>FACTORY INFO</p>\n            </div>\n            <div onClick={damToggle}>\n              <img src={waterDam} style={{width:\"60px\"}} alt='Dam'/>\n              <p>DAM INFO</p>\n            </div>\n          </div>\n        </Row>\n      </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}